<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <title>Lector CI Chilena - Web</title>
  <style>
    :root {
      --primary: #3498db;
      --primary-dark: #2980b9;
      --text: #333;
      --background: #f9f9f9;
      --card: white;
      --error: #e74c3c;
      --success: #2ecc71;
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, sans-serif;
      line-height: 1.5;
      color: var(--text);
      background: var(--background);
      padding: 20px;
      max-width: 100%;
      overflow-x: hidden;
      -webkit-tap-highlight-color: transparent;
    }
    
    h1, h2, h3 {
      color: var(--text);
      margin-bottom: 15px;
    }
    
    h1 {
      font-size: 24px;
      text-align: center;
    }
    
    h2 {
      font-size: 20px;
      border-bottom: 1px solid #ddd;
      padding-bottom: 8px;
      margin-top: 20px;
    }
    
    .card {
      background: var(--card);
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 20px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.08);
    }
    
    video, canvas, #preview {
      width: 100%;
      max-height: 50vh;
      border-radius: 8px;
      background: black;
      display: block;
      margin: 10px 0;
    }
    
    canvas {
      display: none;
    }
    
    button, .btn {
      display: inline-block;
      width: 100%;
      padding: 12px;
      background: var(--primary);
      color: white;
      border: none;
      border-radius: 8px;
      font-size: 16px;
      font-weight: 500;
      text-align: center;
      cursor: pointer;
      margin: 8px 0;
      transition: background 0.2s;
      -webkit-appearance: none;
    }
    
    button:hover, .btn:hover {
      background: var(--primary-dark);
    }
    
    button:disabled {
      background: #95a5a6;
      cursor: not-allowed;
    }
    
    input[type="file"] {
      width: 100%;
      margin: 10px 0;
    }
    
    .checkbox-container {
      display: flex;
      align-items: center;
      margin: 15px 0;
    }
    
    .checkbox-container input {
      margin-right: 10px;
    }
    
    .data-item {
      margin: 15px 0;
      padding: 12px;
      background: #f8f9fa;
      border-radius: 8px;
      border-left: 4px solid var(--primary);
    }
    
    .data-item strong {
      display: block;
      margin-bottom: 5px;
      color: #7f8c8d;
      font-size: 14px;
    }
    
    .status {
      padding: 12px;
      border-radius: 8px;
      margin: 15px 0;
      font-size: 14px;
    }
    
    .processing {
      background: #fff3cd;
      color: #856404;
    }
    
    .error {
      background: #f8d7da;
      color: #721c24;
    }
    
    .success {
      background: #d4edda;
      color: #155724;
    }
    
    table {
      width: 100%;
      border-collapse: collapse;
      margin: 20px 0;
      font-size: 14px;
    }
    
    th, td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }
    
    th {
      background: var(--primary);
      color: white;
    }
    
    tr:nth-child(even) {
      background: #f2f2f2;
    }
    
    #debug {
      display: none;
      margin: 20px 0;
      padding: 15px;
      background: #f5f5f5;
      border-radius: 8px;
      font-family: monospace;
      white-space: pre-wrap;
      font-size: 12px;
      max-height: 200px;
      overflow-y: auto;
    }
    
    /* Mejoras para móviles */
    @media (max-width: 768px) {
      body {
        padding: 15px;
      }
      
      .card {
        padding: 15px;
      }
      
      button, .btn {
        padding: 14px;
      }
    }
    
    /* Efecto de click para móviles */
    button:active, .btn:active {
      transform: scale(0.98);
    }
  </style>
</head>
<body>

<h1>Lector de Cédula de Identidad Chilena</h1>
<p style="text-align: center; margin-bottom: 20px;">Sistema web para extraer datos de cédulas chilenas</p>

<div class="card">
  <h2>Captura de Imagen</h2>
  
  <div style="margin-bottom: 20px;">
    <h3>Usar Cámara:</h3>
    <video id="video" autoplay playsinline></video>
    <button id="capturar">📷 Capturar Foto</button>
  </div>
  
  <div style="margin-bottom: 20px;">
    <h3>O subir imagen:</h3>
    <label for="fileInput" class="btn">📁 Seleccionar Archivo</label>
    <input type="file" id="fileInput" accept="image/*" style="display: none;">
  </div>
  
  <div class="checkbox-container">
    <input type="checkbox" id="preprocesar" checked>
    <label for="preprocesar">Preprocesar imagen para mejor reconocimiento</label>
  </div>
  
  <div class="checkbox-container">
    <input type="checkbox" id="mostrarDebug">
    <label for="mostrarDebug">Mostrar información técnica</label>
  </div>
</div>

<div class="card">
  <h2>Resultados</h2>
  
  <div id="preview-container">
    <h3>Vista previa:</h3>
    <canvas id="canvas"></canvas>
    <img id="preview" alt="Previsualización">
  </div>
  
  <div id="estado" class="status processing" style="display:none;">
    Procesando imagen, por favor espere...
  </div>
  
  <div id="error" class="status error" style="display:none;"></div>
  
  <div class="data-item">
    <strong>Nombre Completo:</strong>
    <span id="nombre">-</span>
  </div>
  
  <div class="data-item">
    <strong>RUT/RUN:</strong>
    <span id="rut">-</span>
  </div>
  
  <div class="data-item">
    <strong>Fecha de Nacimiento:</strong>
    <span id="fecha">-</span>
  </div>
  
  <div class="data-item">
    <strong>Edad:</strong>
    <span id="edad">-</span>
  </div>
</div>

<div class="card">
  <h2>Historial</h2>
  <button id="limpiar">🧹 Limpiar Historial</button>
  
  <table>
    <thead>
      <tr>
        <th>Nombre</th>
        <th>RUT</th>
        <th>Fecha Nac.</th>
        <th>Edad</th>
      </tr>
    </thead>
    <tbody id="tablaRegistros">
      <tr><td colspan="4" style="text-align: center;">No hay registros aún</td></tr>
    </tbody>
  </table>
</div>

<div id="debug" class="card">
  <h3>Información Técnica:</h3>
  <div id="debugText"></div>
</div>

<script src="https://cdn.jsdelivr.net/npm/tesseract.js@4/dist/tesseract.min.js"></script>
<script>
// Elementos del DOM
const video = document.getElementById('video');
const canvas = document.getElementById('canvas');
const preview = document.getElementById('preview');
const estado = document.getElementById('estado');
const errorMsg = document.getElementById('error');
const debugText = document.getElementById('debugText');
const debugSection = document.getElementById('debug');
const mostrarDebug = document.getElementById('mostrarDebug');

// Configurar cámara
async function iniciarCamara() {
  try {
    const constraints = {
      video: {
        facingMode: "environment",
        width: { ideal: 1280 },
        height: { ideal: 720 }
      }
    };
    
    const stream = await navigator.mediaDevices.getUserMedia(constraints);
    video.srcObject = stream;
    video.play();
  } catch (err) {
    console.error("Error al acceder a la cámara:", err);
    mostrarError("No se pudo acceder a la cámara. Asegúrate de haber dado los permisos necesarios.");
    
    // Mostrar opción alternativa de subir archivo
    document.getElementById('fileInput').style.display = 'block';
  }
}

// Event Listeners
document.getElementById('capturar').addEventListener('click', capturarImagen);
document.getElementById('fileInput').addEventListener('change', cargarImagen);
document.getElementById('limpiar').addEventListener('click', limpiarRegistros);
mostrarDebug.addEventListener('change', toggleDebug);

// Iniciar cámara al cargar la página
document.addEventListener('DOMContentLoaded', function() {
  iniciarCamara();
  
  // Detectar si es móvil para mejor UI
  if (/Mobi|Android|iPhone|iPad|iPod/i.test(navigator.userAgent)) {
    document.body.classList.add('mobile');
  }
});

// Función para capturar imagen de la cámara
function capturarImagen() {
  const ctx = canvas.getContext('2d');
  const videoWidth = video.videoWidth;
  const videoHeight = video.videoHeight;
  
  // Ajustar tamaño del canvas manteniendo proporción
  const aspectRatio = videoWidth / videoHeight;
  canvas.width = Math.min(videoWidth, window.innerWidth - 40);
  canvas.height = canvas.width / aspectRatio;
  
  // Dibujar imagen del video en el canvas
  ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
  
  // Mostrar vista previa
  preview.src = canvas.toDataURL('image/jpeg', 0.9);
  preview.style.display = 'block';
  
  // Procesar imagen
  procesarImagen(canvas);
}

// Función para cargar imagen desde archivo
function cargarImagen(e) {
  const file = e.target.files[0];
  if (!file) return;

  const reader = new FileReader();
  reader.onload = function(event) {
    const img = new Image();
    img.onload = function() {
      // Configurar canvas con las dimensiones de la imagen
      const maxWidth = Math.min(img.width, window.innerWidth - 40);
      const scaleFactor = maxWidth / img.width;
      canvas.width = maxWidth;
      canvas.height = img.height * scaleFactor;
      
      // Dibujar imagen en el canvas
      const ctx = canvas.getContext('2d');
      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
      
      // Mostrar vista previa
      preview.src = canvas.toDataURL('image/jpeg', 0.9);
      preview.style.display = 'block';
      
      // Procesar imagen
      procesarImagen(canvas);
    };
    img.src = event.target.result;
  };
  reader.readAsDataURL(file);
}

// [Resto del código JavaScript permanece igual...]
// [Incluye todas las funciones de procesamiento de imágenes, OCR, extracción de datos, etc.]
// [Que se mostraron en las respuestas anteriores]

// Funciones auxiliares para la UI
function mostrarEstado(mensaje, tipo = "processing") {
  estado.textContent = mensaje;
  estado.className = "status " + tipo;
  estado.style.display = "block";
}

function mostrarError(mensaje) {
  errorMsg.textContent = mensaje;
  errorMsg.className = "status error";
  errorMsg.style.display = "block";
  
  // Ocultar después de 5 segundos
  setTimeout(() => {
    errorMsg.style.display = "none";
  }, 5000);
}

function ocultarError() {
  errorMsg.style.display = "none";
}

function toggleDebug() {
  debugSection.style.display = this.checked ? "block" : "none";
}

function limpiarRegistros() {
  document.getElementById('tablaRegistros').innerHTML = 
    '<tr><td colspan="4" style="text-align: center;">No hay registros aún</td></tr>';
}

// Inicialización
limpiarRegistros();
</script>

</body>
</html>
